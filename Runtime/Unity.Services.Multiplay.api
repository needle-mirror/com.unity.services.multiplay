// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.Services.Multiplay
{
    public interface IMultiplayAllocationInfo
    {
        public abstract string AllocationId { get; }
        public abstract string EventId { get; }
        public abstract long ServerId { get; }
    }

    public interface IMultiplayService
    {
        public abstract Unity.Services.Multiplay.ServerConfig ServerConfig { get; }
        public abstract System.Threading.Tasks.Task<string> GetPayloadAllocationAsPlainText();
        public abstract System.Threading.Tasks.Task<TPayload> GetPayloadAllocationFromJsonAs<TPayload>(bool throwOnMissingMembers = False);
        public abstract System.Threading.Tasks.Task ReadyServerForPlayersAsync();
        public abstract System.Threading.Tasks.Task<Unity.Services.Multiplay.IServerQueryHandler> StartServerQueryHandlerAsync(System.UInt16 maxPlayers, string serverName, string gameType, string buildId, string map);
        public abstract System.Threading.Tasks.Task<Unity.Services.Multiplay.IServerEvents> SubscribeToServerEventsAsync(Unity.Services.Multiplay.MultiplayEventCallbacks callbacks);
        public abstract System.Threading.Tasks.Task UnreadyServerAsync();
    }

    public interface IServerEvents
    {
        public abstract Unity.Services.Multiplay.MultiplayEventCallbacks Callbacks { get; }
        public abstract System.Threading.Tasks.Task SubscribeAsync();
        public abstract System.Threading.Tasks.Task UnsubscribeAsync();
    }

    public interface IServerQueryHandler : System.IDisposable
    {
        public abstract string BuildId { get; set; }
        public abstract System.UInt16 CurrentPlayers { get; set; }
        public abstract string GameType { get; set; }
        public abstract string Map { get; set; }
        public abstract System.UInt16 MaxPlayers { get; set; }
        public abstract System.UInt16 Port { get; set; }
        public abstract string ServerName { get; set; }
        public abstract void UpdateServerCheck();
    }

    public class MultiplayAllocation : Unity.Services.Multiplay.IMultiplayAllocationInfo
    {
        public virtual string AllocationId { get; }
        public virtual string EventId { get; }
        public virtual long ServerId { get; }
        public MultiplayAllocation(string eventId, long serverId, string allocationId) {}
    }

    public class MultiplayDeallocation : Unity.Services.Multiplay.IMultiplayAllocationInfo
    {
        public virtual string AllocationId { get; }
        public virtual string EventId { get; }
        public virtual long ServerId { get; }
        public MultiplayDeallocation(string eventId, long serverId, string allocationId) {}
    }

    public class MultiplayError
    {
        public string Detail { get; }
        public Unity.Services.Multiplay.MultiplayExceptionReason Reason { get; }
        public MultiplayError(Unity.Services.Multiplay.MultiplayExceptionReason reason, string detail) {}
    }

    public class MultiplayEventCallbacks
    {
        public event System.Action<Unity.Services.Multiplay.MultiplayAllocation> Allocate;
        public event System.Action<Unity.Services.Multiplay.MultiplayDeallocation> Deallocate;
        public event System.Action<Unity.Services.Multiplay.MultiplayError> Error;
        public event System.Action<Unity.Services.Multiplay.MultiplayServerSubscriptionState> SubscriptionStateChanged;
        public MultiplayEventCallbacks() {}
    }

    public enum MultiplayExceptionReason
    {
        public const Unity.Services.Multiplay.MultiplayExceptionReason AlreadySubscribedToLobby = 25601;
        public const Unity.Services.Multiplay.MultiplayExceptionReason AlreadyUnsubscribedFromLobby = 25602;
        public const Unity.Services.Multiplay.MultiplayExceptionReason BadGateway = 25502;
        public const Unity.Services.Multiplay.MultiplayExceptionReason BadRequest = 25400;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Conflict = 25409;
        public const Unity.Services.Multiplay.MultiplayExceptionReason EntityNotFound = 25404;
        public const Unity.Services.Multiplay.MultiplayExceptionReason ExpectationFailed = 25417;
        public const Unity.Services.Multiplay.MultiplayExceptionReason FailedDependency = 25424;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Forbidden = 25403;
        public const Unity.Services.Multiplay.MultiplayExceptionReason GatewayTimeout = 25504;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Gone = 25410;
        public const Unity.Services.Multiplay.MultiplayExceptionReason HttpVersionNotSupported = 25505;
        public const Unity.Services.Multiplay.MultiplayExceptionReason InsufficientStorage = 25507;
        public const Unity.Services.Multiplay.MultiplayExceptionReason InternalServerError = 25500;
        public const Unity.Services.Multiplay.MultiplayExceptionReason LengthRequired = 25411;
        public const Unity.Services.Multiplay.MultiplayExceptionReason LobbyEventServiceConnectionError = 25604;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Locked = 25423;
        public const Unity.Services.Multiplay.MultiplayExceptionReason LoopDetected = 25508;
        public const Unity.Services.Multiplay.MultiplayExceptionReason MethodNotAllowed = 25405;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Misdirected = 25421;
        public const Unity.Services.Multiplay.MultiplayExceptionReason NetworkAuthenticationRequired = 25511;
        public const Unity.Services.Multiplay.MultiplayExceptionReason NetworkError = 25998;
        public const Unity.Services.Multiplay.MultiplayExceptionReason NotAcceptable = 25406;
        public const Unity.Services.Multiplay.MultiplayExceptionReason NotExtended = 25510;
        public const Unity.Services.Multiplay.MultiplayExceptionReason NotImplemented = 25501;
        public const Unity.Services.Multiplay.MultiplayExceptionReason PaymentRequired = 25402;
        public const Unity.Services.Multiplay.MultiplayExceptionReason PreconditionFailed = 25412;
        public const Unity.Services.Multiplay.MultiplayExceptionReason PreconditionRequired = 25428;
        public const Unity.Services.Multiplay.MultiplayExceptionReason ProxyAuthenticationRequired = 25407;
        public const Unity.Services.Multiplay.MultiplayExceptionReason RangeNotSatisfiable = 25416;
        public const Unity.Services.Multiplay.MultiplayExceptionReason RateLimited = 25429;
        public const Unity.Services.Multiplay.MultiplayExceptionReason RequestEntityTooLarge = 25413;
        public const Unity.Services.Multiplay.MultiplayExceptionReason RequestHeaderFieldsTooLarge = 25431;
        public const Unity.Services.Multiplay.MultiplayExceptionReason RequestTimeOut = 25408;
        public const Unity.Services.Multiplay.MultiplayExceptionReason RequestUriTooLong = 25414;
        public const Unity.Services.Multiplay.MultiplayExceptionReason ServiceUnavailable = 25503;
        public const Unity.Services.Multiplay.MultiplayExceptionReason SubscriptionToLobbyLostWhileBusy = 25603;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Teapot = 25418;
        public const Unity.Services.Multiplay.MultiplayExceptionReason TooEarly = 25425;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Unauthorized = 25401;
        public const Unity.Services.Multiplay.MultiplayExceptionReason UnavailableForLegalReasons = 25451;
        public const Unity.Services.Multiplay.MultiplayExceptionReason Unknown = 25999;
        public const Unity.Services.Multiplay.MultiplayExceptionReason UnknownErrorCode = 0;
        public const Unity.Services.Multiplay.MultiplayExceptionReason UnprocessableTransaction = 25422;
        public const Unity.Services.Multiplay.MultiplayExceptionReason UnsupportedMediaType = 25415;
        public const Unity.Services.Multiplay.MultiplayExceptionReason UpgradeRequired = 25426;
        public int value__;
        public const Unity.Services.Multiplay.MultiplayExceptionReason VariantAlsoNegotiates = 25506;
    }

    public enum MultiplayServerSubscriptionState
    {
        public const Unity.Services.Multiplay.MultiplayServerSubscriptionState Error = 3;
        public const Unity.Services.Multiplay.MultiplayServerSubscriptionState Subscribing = 4;
        public const Unity.Services.Multiplay.MultiplayServerSubscriptionState Synced = 1;
        public const Unity.Services.Multiplay.MultiplayServerSubscriptionState Unsubscribed = 0;
        public const Unity.Services.Multiplay.MultiplayServerSubscriptionState Unsynced = 2;
        public int value__;
    }

    public static class MultiplayService
    {
        public static Unity.Services.Multiplay.IMultiplayService Instance { get; }
    }

    [System.Runtime.Serialization.DataContract(Name = @"server.json")] [UnityEngine.Scripting.Preserve] public class ServerConfig
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, IsRequired = true, Name = @"allocatedUUID")] [UnityEngine.Scripting.Preserve] public string AllocationId { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, IsRequired = true, Name = @"port")] [UnityEngine.Scripting.Preserve] public System.UInt16 Port { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, IsRequired = true, Name = @"queryPort")] [UnityEngine.Scripting.Preserve] public System.UInt16 QueryPort { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, IsRequired = true, Name = @"serverID")] [UnityEngine.Scripting.Preserve] public long ServerId { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = false, IsRequired = true, Name = @"serverLogDir")] [UnityEngine.Scripting.Preserve] public string ServerLogDirectory { get; }
        [UnityEngine.Scripting.Preserve] public ServerConfig(long serverId, string allocationId, System.UInt16 queryPort, System.UInt16 port, string serverLogDirectory) {}
    }
}

namespace Unity.Services.Multiplay.Models
{
    [System.Runtime.Serialization.DataContract(Name = @"ErrorResponseBody")] [UnityEngine.Scripting.Preserve] public class ErrorResponseBody
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"detail")] [UnityEngine.Scripting.Preserve] public string Detail { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"status")] [UnityEngine.Scripting.Preserve] public int Status { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"title")] [UnityEngine.Scripting.Preserve] public string Title { get; }
        [UnityEngine.Scripting.Preserve] public ErrorResponseBody(int status, string detail, string title) {}
    }

    public interface IOneOf
    {
        public abstract System.Type Type { get; }
        public abstract object Value { get; }
    }

    [System.Runtime.Serialization.DataContract(Name = @"KeyValuePair")] [UnityEngine.Scripting.Preserve] public class KeyValuePair
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"key")] [UnityEngine.Scripting.Preserve] public string Key { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"value")] [UnityEngine.Scripting.Preserve] public string Value { get; }
        [UnityEngine.Scripting.Preserve] public KeyValuePair(string key, string value) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"PayloadAllocationErrorResponseBody")] [UnityEngine.Scripting.Preserve] public class PayloadAllocationErrorResponseBody
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"error")] [UnityEngine.Scripting.Preserve] public bool Error { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"error_code")] [UnityEngine.Scripting.Preserve] public int ErrorCode { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"error_message")] [UnityEngine.Scripting.Preserve] public string ErrorMessage { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"success")] [UnityEngine.Scripting.Preserve] public bool Success { get; }
        [UnityEngine.Scripting.Preserve] public PayloadAllocationErrorResponseBody(bool success, bool error, int errorCode, string errorMessage) {}
    }

    [System.Runtime.Serialization.DataContract(Name = @"PayloadTokenResponseBody")] [UnityEngine.Scripting.Preserve] public class PayloadTokenResponseBody
    {
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"error")] [UnityEngine.Scripting.Preserve] public string Error { get; }
        [System.Runtime.Serialization.DataMember(EmitDefaultValue = true, IsRequired = true, Name = @"token")] [UnityEngine.Scripting.Preserve] public string Token { get; }
        [UnityEngine.Scripting.Preserve] public PayloadTokenResponseBody(string token, string error) {}
    }
}
